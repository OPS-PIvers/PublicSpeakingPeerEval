<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <?!= include('Stylesheet'); ?>
  </head>
  <body>
    <div class="container">
      <header>
        <h1>Speech Peer Evaluation</h1>
        <div id="resultMessage" class="result-message" style="display: none;"></div>
      </header>
      
      <form id="evaluationForm" onsubmit="handleFormSubmit(event)">
        <!-- Collapsible Sections -->
        <div class="accordion">
          <!-- Section 1: People -->
          <div class="accordion-item active" id="section1">
            <div class="accordion-header">
              <h2>1. Who are you evaluating?</h2>
              <span class="expand-icon material-icons">expand_less</span>
            </div>
            <div class="accordion-content">
              <div class="form-group">
                <label for="evaluatorSelect">Your Name:</label>
                <select id="evaluatorSelect" onchange="updateEvaluatorName()">
                  <option value="">Select your name</option>
                  <!-- Will be populated by JavaScript -->
                </select>
                <input type="hidden" id="evaluatorName" name="evaluatorName">
              </div>
              
              <div class="form-group">
                <label for="presenterSelect">Presenter's Name:</label>
                <select id="presenterSelect" onchange="updatePresenterName()">
                  <option value="">Select presenter</option>
                  <!-- Will be populated by JavaScript -->
                </select>
                <input type="hidden" id="presenterName" name="presenterName">
              </div>
              
              <div class="validation-message" id="section1Validation"></div>
              
              <div class="button-row">
                <button type="button" class="next-button" onclick="nextSection('section1', 'section2')">Next <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 2: Initial Position -->
          <div class="accordion-item" id="section2">
            <div class="accordion-header">
              <h2>2. Your Initial Position</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <div class="form-group">
                <label>What was your initial position on the argument before the speech?</label>
                <div id="initialPositionOptions" class="option-buttons">
                  <button type="button" class="option-button" data-value="Strongly Positive">Strongly Positive</button>
                  <button type="button" class="option-button" data-value="Somewhat Positive">Somewhat Positive</button>
                  <button type="button" class="option-button" data-value="Curious/Neutral">Curious/Neutral</button>
                  <button type="button" class="option-button" data-value="Somewhat Opposed">Somewhat Opposed</button>
                  <button type="button" class="option-button" data-value="Strongly Opposed">Strongly Opposed</button>
                </div>
                <input type="hidden" id="initialPosition" name="initialPosition">
              </div>
              
              <div class="validation-message" id="section2Validation"></div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section2', 'section1')"><span class="material-icons">arrow_back</span> Previous</button>
                <button type="button" class="next-button" onclick="nextSection('section2', 'section3')">Next <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 3: Body of Speech -->
          <div class="accordion-item" id="section3">
            <div class="accordion-header">
              <h2>3. Body of Speech</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <div class="form-group">
                <label>How would you rate the organization and content of the speech?</label>
                <div class="rubric-grid">
                  <div class="rubric-row">
                    <div class="rubric-cell" data-value="4">
                      <div class="rubric-rating">4</div>
                      <div class="rubric-description">Information was thorough and followed a logical order</div>
                    </div>
                    <div class="rubric-cell" data-value="3">
                      <div class="rubric-rating">3</div>
                      <div class="rubric-description">Information was thorough but may be slightly unorganized</div>
                    </div>
                    <div class="rubric-cell" data-value="2">
                      <div class="rubric-rating">2</div>
                      <div class="rubric-description">Some information seemed to be missing, and order is somewhat confusing</div>
                    </div>
                    <div class="rubric-cell" data-value="1">
                      <div class="rubric-rating">1</div>
                      <div class="rubric-description">Very limited, hard to understand, or information covered is sparse</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="bodyScore" name="bodyScore">
              </div>
              
              <div class="form-group">
                <button type="button" id="bodyCommentsToggle" class="comments-toggle">
                  <span class="material-icons">add_circle_outline</span> Add Comments
                </button>
                <div id="bodyCommentsBox" class="comments-box">
                  <textarea id="bodyComments" name="bodyComments" rows="3" placeholder="Add comments about the speech content and organization..."></textarea>
                </div>
              </div>
              
              <div class="validation-message" id="section3Validation"></div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section3', 'section2')"><span class="material-icons">arrow_back</span> Previous</button>
                <button type="button" class="next-button" onclick="nextSection('section3', 'section4')">Next <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 4: Diction and Rhetoric -->
          <div class="accordion-item" id="section4">
            <div class="accordion-header">
              <h2>4. Diction and Use of Rhetoric</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <div class="form-group">
                <label>How would you rate the speaker's language and word choice?</label>
                <div class="rubric-grid">
                  <div class="rubric-row">
                    <div class="rubric-cell" data-value="4">
                      <div class="rubric-rating">4</div>
                      <div class="rubric-description">Language is vivid, clear, specific, and academic with multiple rhetorical devices</div>
                    </div>
                    <div class="rubric-cell" data-value="3">
                      <div class="rubric-rating">3</div>
                      <div class="rubric-description">Language is clear, specific, and/or academic with some rhetorical devices</div>
                    </div>
                    <div class="rubric-cell" data-value="2">
                      <div class="rubric-rating">2</div>
                      <div class="rubric-description">Language is adequate but lacking in specificity or uses only 1 rhetorical device</div>
                    </div>
                    <div class="rubric-cell" data-value="1">
                      <div class="rubric-rating">1</div>
                      <div class="rubric-description">Language is imprecise or unclear with no rhetorical devices</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="dictionScore" name="dictionScore">
              </div>
              
              <div class="form-group">
                <label>Rhetorical devices identified (select all that apply):</label>
                <div id="rhetoricalDevicesOptions" class="checkbox-buttons">
                  <button type="button" class="checkbox-button" data-value="Analogy">Analogy</button>
                  <button type="button" class="checkbox-button" data-value="Metaphor">Metaphor</button>
                  <button type="button" class="checkbox-button" data-value="Repetition">Repetition</button>
                  <button type="button" class="checkbox-button" data-value="Parallelism">Parallelism</button>
                  <button type="button" class="checkbox-button" data-value="Ethos">Ethos</button>
                  <button type="button" class="checkbox-button" data-value="Pathos">Pathos</button>
                  <button type="button" class="checkbox-button" data-value="Logos">Logos</button>
                  <button type="button" class="checkbox-button" data-value="Rhetorical Question">Rhetorical Question</button>
                </div>
                <input type="hidden" id="rhetoricalDevices" name="rhetoricalDevices">
              </div>
              
              <div class="form-group">
                <button type="button" id="dictionCommentsToggle" class="comments-toggle">
                  <span class="material-icons">add_circle_outline</span> Add Comments
                </button>
                <div id="dictionCommentsBox" class="comments-box">
                  <textarea id="dictionComments" name="dictionComments" rows="3" placeholder="Add comments about language and rhetorical devices..."></textarea>
                </div>
              </div>
              
              <div class="validation-message" id="section4Validation"></div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section4', 'section3')"><span class="material-icons">arrow_back</span> Previous</button>
                <button type="button" class="next-button" onclick="nextSection('section4', 'section5')">Next <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 5: Delivery -->
          <div class="accordion-item" id="section5">
            <div class="accordion-header">
              <h2>5. Delivery (Eye Contact, Posture, & Voice)</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <!-- Eye Contact -->
              <div class="form-group">
                <label>Eye Contact:</label>
                <div class="rubric-grid">
                  <div class="rubric-row">
                    <div class="rubric-cell" data-value="4">
                      <div class="rubric-rating">4</div>
                      <div class="rubric-description">Speaker makes eye contact with entire audience and looks at note cards only occasionally</div>
                    </div>
                    <div class="rubric-cell" data-value="3">
                      <div class="rubric-rating">3</div>
                      <div class="rubric-description">Speaker makes consistent eye contact with some audience members</div>
                    </div>
                    <div class="rubric-cell" data-value="2">
                      <div class="rubric-rating">2</div>
                      <div class="rubric-description">Speaker looks around the room or at note cards most of the time</div>
                    </div>
                    <div class="rubric-cell" data-value="1">
                      <div class="rubric-rating">1</div>
                      <div class="rubric-description">Speaker does not make eye contact, or only looks up a few times</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="eyeContactScore" name="eyeContactScore">
              </div>
              
              <!-- Posture & Gestures -->
              <div class="form-group">
                <label>Posture and Gestures:</label>
                <div class="rubric-grid">
                  <div class="rubric-row">
                    <div class="rubric-cell" data-value="4">
                      <div class="rubric-rating">4</div>
                      <div class="rubric-description">Speaker stands tall (or sits straight) and gestures naturally</div>
                    </div>
                    <div class="rubric-cell" data-value="3">
                      <div class="rubric-rating">3</div>
                      <div class="rubric-description">Speaker may lack good posture or may move around somewhat. Gesturing may be limited but is still strategic</div>
                    </div>
                    <div class="rubric-cell" data-value="2">
                      <div class="rubric-rating">2</div>
                      <div class="rubric-description">Speaker lacks good posture, fidgets, and gestures awkwardly or not at all. Speaker moves around distractingly</div>
                    </div>
                    <div class="rubric-cell" data-value="1">
                      <div class="rubric-rating">1</div>
                      <div class="rubric-description">Speaker leans against the board or fidgets so much that it distracts from the speech</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="postureScore" name="postureScore">
              </div>
              
              <!-- Vocal Variety -->
              <div class="form-group">
                <label>Vocal Variety, Fluidity, and Pacing:</label>
                <div class="rubric-grid">
                  <div class="rubric-row">
                    <div class="rubric-cell" data-value="4">
                      <div class="rubric-rating">4</div>
                      <div class="rubric-description">Speech is pleasing to listen to, with excellent variety, and has obviously been rehearsed</div>
                    </div>
                    <div class="rubric-cell" data-value="3">
                      <div class="rubric-rating">3</div>
                      <div class="rubric-description">Speech is mostly pleasing to listen to and has obviously been rehearsed</div>
                    </div>
                    <div class="rubric-cell" data-value="2">
                      <div class="rubric-rating">2</div>
                      <div class="rubric-description">Speech lacks fluidity or vocal variety, or may stumble over his or her words</div>
                    </div>
                    <div class="rubric-cell" data-value="1">
                      <div class="rubric-rating">1</div>
                      <div class="rubric-description">Speech has obviously not been rehearsed at all and may be difficult to listen to</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="vocalScore" name="vocalScore">
              </div>
              
              <div class="form-group">
                <button type="button" id="deliveryCommentsToggle" class="comments-toggle">
                  <span class="material-icons">add_circle_outline</span> Add Comments
                </button>
                <div id="deliveryCommentsBox" class="comments-box">
                  <textarea id="deliveryComments" name="deliveryComments" rows="3" placeholder="Add comments about delivery, eye contact, posture, and vocal variety..."></textarea>
                </div>
              </div>
              
              <div class="validation-message" id="section5Validation"></div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section5', 'section4')"><span class="material-icons">arrow_back</span> Previous</button>
                <button type="button" class="next-button" onclick="nextSection('section5', 'section6')">Next <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 6: Impact Assessment -->
          <div class="accordion-item" id="section6">
            <div class="accordion-header">
              <h2>6. Speech Impact</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <div class="form-group">
                <label>How did your position change after the speech?</label>
                <div id="positionChangeOptions" class="option-buttons">
                  <button type="button" class="option-button" data-value="Significantly more convinced">Significantly more convinced</button>
                  <button type="button" class="option-button" data-value="Somewhat more convinced">Somewhat more convinced</button>
                  <button type="button" class="option-button" data-value="No change">No change</button>
                  <button type="button" class="option-button" data-value="Somewhat less convinced">Somewhat less convinced</button>
                  <button type="button" class="option-button" data-value="Significantly less convinced">Significantly less convinced</button>
                </div>
                <input type="hidden" id="positionChange" name="positionChange">
              </div>
              
              <div class="form-group">
                <label>What element was most convincing?</label>
                <div id="mostConvincingOptions" class="option-buttons">
                  <button type="button" class="option-button" data-value="Logical arguments">Logical arguments</button>
                  <button type="button" class="option-button" data-value="Facts and statistics">Facts and statistics</button>
                  <button type="button" class="option-button" data-value="Examples">Examples</button>
                  <button type="button" class="option-button" data-value="Emotional appeal">Emotional appeal</button>
                  <button type="button" class="option-button" data-value="Personal stories">Personal stories</button>
                  <button type="button" class="option-button" data-value="Nothing was convincing">Nothing was convincing</button>
                </div>
                <input type="hidden" id="mostConvincing" name="mostConvincing">
              </div>
              
              <div class="form-group">
                <label>What element was least convincing?</label>
                <div id="leastConvincingOptions" class="option-buttons">
                  <button type="button" class="option-button" data-value="Facts and statistics">Facts and statistics</button>
                  <button type="button" class="option-button" data-value="Personal stories">Personal stories</button>
                  <button type="button" class="option-button" data-value="Logical arguments">Logical arguments</button>
                  <button type="button" class="option-button" data-value="Emotional appeal">Emotional appeal</button>
                  <button type="button" class="option-button" data-value="Examples">Examples</button>
                  <button type="button" class="option-button" data-value="Everything was convincing">Everything was convincing</button>
                </div>
                <input type="hidden" id="leastConvincing" name="leastConvincing">
              </div>
              
              <div class="validation-message" id="section6Validation"></div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section6', 'section5')"><span class="material-icons">arrow_back</span> Previous</button>
                <button type="button" class="next-button" onclick="nextSection('section6', 'section7')">Next <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 7: Constructive Feedback -->
          <div class="accordion-item" id="section7">
            <div class="accordion-header">
              <h2>7. Constructive Feedback</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <div class="form-group">
                <label>What did the presenter do well?</label>
                <div id="didWellOptions" class="option-buttons">
                  <!-- Content -->
                  <button type="button" class="option-button" data-value="Clear organization">Clear organization</button>
                  <button type="button" class="option-button" data-value="Compelling evidence">Compelling evidence</button>
                  <button type="button" class="option-button" data-value="Strong conclusion">Strong conclusion</button>
                  <!-- Delivery -->
                  <button type="button" class="option-button" data-value="Confident delivery">Confident delivery</button>
                  <button type="button" class="option-button" data-value="Effective eye contact">Effective eye contact</button>
                  <button type="button" class="option-button" data-value="Natural gestures">Natural gestures</button>
                  <!-- Language -->
                  <button type="button" class="option-button" data-value="Effective rhetoric">Effective rhetoric</button>
                  <button type="button" class="option-button" data-value="Clear language">Clear language</button>
                </div>
                <input type="hidden" id="didWell" name="didWell">
              </div>
              
              <div class="form-group">
                <label>What could be improved?</label>
                <div id="improvementOptions" class="option-buttons">
                  <button type="button" class="option-button" data-value="More evidence needed">More evidence needed</button>
                  <button type="button" class="option-button" data-value="Better organization">Better organization</button>
                  <button type="button" class="option-button" data-value="More confident delivery">More confident delivery</button>
                  <button type="button" class="option-button" data-value="Clearer points">Clearer points</button>
                  <button type="button" class="option-button" data-value="Better eye contact">Better eye contact</button>
                  <button type="button" class="option-button" data-value="Improved posture/gestures">Improved posture/gestures</button>
                  <button type="button" class="option-button" data-value="Stronger conclusion">Stronger conclusion</button>
                </div>
                <input type="hidden" id="improvement" name="improvement">
              </div>
              
              <div class="validation-message" id="section7Validation"></div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section7', 'section6')"><span class="material-icons">arrow_back</span> Previous</button>
                <button type="button" class="next-button" onclick="nextSection('section7', 'section8')">Review <span class="material-icons">arrow_forward</span></button>
              </div>
            </div>
          </div>
          
          <!-- Section 8: Summary/Review -->
          <div class="accordion-item" id="section8">
            <div class="accordion-header">
              <h2>8. Review Your Evaluation</h2>
              <span class="expand-icon material-icons">expand_more</span>
            </div>
            <div class="accordion-content">
              <div class="summary-container">
                <div id="summaryContent"></div>
              </div>
              
              <div class="button-row">
                <button type="button" class="prev-button" onclick="prevSection('section8', 'section7')"><span class="material-icons">arrow_back</span> Edit</button>
                <button type="submit" id="submitBtn" class="submit-button">Submit Evaluation</button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
    
    <script>
      // Initialize page
      document.addEventListener('DOMContentLoaded', function() {
        initPage();
      });
      
      // Initialize page functions
      function initPage() {
        setupFormControls();
        setupRubricCells();
        initializeAccordion();
        loadStudentData();
      }
      
      // Load student data for dropdowns
      function loadStudentData() {
        google.script.run.withSuccessHandler(populateStudentDropdowns).getStudentData();
      }
      
      // Populate student dropdowns with data from server
      function populateStudentDropdowns(students) {
        console.log("Received student data:", JSON.stringify(students));
        
        const evaluatorSelect = document.getElementById('evaluatorSelect');
        const presenterSelect = document.getElementById('presenterSelect');
        
        if (!evaluatorSelect || !presenterSelect) {
          console.error("Could not find dropdown elements");
          return;
        }
        
        // Clear existing options
        evaluatorSelect.innerHTML = '<option value="">Select your name</option>';
        presenterSelect.innerHTML = '<option value="">Select presenter</option>';
        
        // Check if we have valid student data
        if (!students || !Array.isArray(students) || students.length === 0) {
          console.error("No valid student data received");
          return;
        }
        
        // Add students to both dropdowns
        students.forEach(student => {
          // Use fullName for display
          const displayName = student.fullName;
          
          if (!displayName) {
            console.warn("Student has no name", student);
            return;
          }
          
          const evaluatorOption = document.createElement('option');
          evaluatorOption.value = displayName;
          evaluatorOption.textContent = displayName;
          evaluatorSelect.appendChild(evaluatorOption);
          
          const presenterOption = document.createElement('option');
          presenterOption.value = displayName;
          presenterOption.textContent = displayName;
          presenterSelect.appendChild(presenterOption);
        });
        
        console.log("Dropdowns populated with", students.length, "students");
      }
      
      // Initialize accordion sections
      function initializeAccordion() {
        const headers = document.querySelectorAll('.accordion-header');
        
        headers.forEach(header => {
          header.addEventListener('click', function() {
            // Toggle only if clicking on an inactive section
            const section = this.parentElement;
            if (!section.classList.contains('active')) {
              expandSection(section.id);
            }
          });
        });
      }
      
      // Expand a section and collapse others
      function expandSection(sectionId) {
        const sections = document.querySelectorAll('.accordion-item');
        
        sections.forEach(section => {
          const isTarget = section.id === sectionId;
          section.classList.toggle('active', isTarget);
          
          const icon = section.querySelector('.expand-icon');
          icon.textContent = isTarget ? 'expand_less' : 'expand_more';
        });
        
        // Scroll to the top of the expanded section
        document.getElementById(sectionId).scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
      
      // Navigate to next section
      function nextSection(currentId, nextId) {
        // Validate current section first
        if (!validateSection(currentId)) {
          return;
        }
        
        // If going to review section, generate summary
        if (nextId === 'section8') {
          generateSummary();
        }
        
        // Expand next section
        expandSection(nextId);
      }
      
      // Navigate to previous section
      function prevSection(currentId, prevId) {
        expandSection(prevId);
      }
      
      // Update hidden inputs when selections change
      function updateEvaluatorName() {
        const select = document.getElementById('evaluatorSelect');
        document.getElementById('evaluatorName').value = select.value;
      }
      
      function updatePresenterName() {
        const select = document.getElementById('presenterSelect');
        document.getElementById('presenterName').value = select.value;
      }
      
      // Set up form controls
      function setupFormControls() {
        // Set up option buttons
        setupOptionButtons('initialPositionOptions', 'initialPosition');
        setupOptionButtons('positionChangeOptions', 'positionChange');
        setupOptionButtons('mostConvincingOptions', 'mostConvincing');
        setupOptionButtons('leastConvincingOptions', 'leastConvincing');
        setupOptionButtons('didWellOptions', 'didWell');
        setupOptionButtons('improvementOptions', 'improvement');
        
        // Set up multi-select buttons
        setupCheckboxButtons('rhetoricalDevicesOptions', 'rhetoricalDevices');
        
        // Set up comments toggles
        setupCommentsToggle('bodyCommentsToggle', 'bodyCommentsBox');
        setupCommentsToggle('dictionCommentsToggle', 'dictionCommentsBox');
        setupCommentsToggle('deliveryCommentsToggle', 'deliveryCommentsBox');
      }
      
      // Set up option buttons (single select)
      function setupOptionButtons(containerId, hiddenInputId) {
        const container = document.getElementById(containerId);
        const hiddenInput = document.getElementById(hiddenInputId);
        
        if (!container || !hiddenInput) return;
        
        const buttons = container.querySelectorAll('.option-button');
        
        buttons.forEach(button => {
          button.addEventListener('click', function() {
            // Remove selected class from all buttons
            buttons.forEach(btn => btn.classList.remove('selected'));
            
            // Add selected class to clicked button
            this.classList.add('selected');
            
            // Update hidden input value
            hiddenInput.value = this.getAttribute('data-value');
          });
        });
      }
      
      // Set up checkbox buttons (multi-select)
      function setupCheckboxButtons(containerId, hiddenInputId) {
        const container = document.getElementById(containerId);
        const hiddenInput = document.getElementById(hiddenInputId);
        
        if (!container || !hiddenInput) return;
        
        const buttons = container.querySelectorAll('.checkbox-button');
        
        buttons.forEach(button => {
          button.addEventListener('click', function() {
            // Toggle selected class
            this.classList.toggle('selected');
            
            // Update hidden input with all selected values
            const selectedButtons = container.querySelectorAll('.checkbox-button.selected');
            const selectedValues = Array.from(selectedButtons).map(btn => btn.getAttribute('data-value'));
            hiddenInput.value = JSON.stringify(selectedValues);
          });
        });
      }
      
      // Set up comments toggle
      function setupCommentsToggle(toggleId, boxId) {
        const toggle = document.getElementById(toggleId);
        const box = document.getElementById(boxId);
        
        if (!toggle || !box) return;
        
        toggle.addEventListener('click', function() {
          const isVisible = box.classList.toggle('visible');
          
          // Change the icon and text based on visibility
          const icon = this.querySelector('.material-icons');
          if (isVisible) {
            icon.textContent = 'remove_circle_outline';
            this.textContent = this.textContent.replace('Add', 'Hide');
          } else {
            icon.textContent = 'add_circle_outline';
            this.textContent = this.textContent.replace('Hide', 'Add');
          }
          
          // Re-add the icon since textContent replaced it
          this.prepend(icon);
        });
      }
      
      // Set up rubric cell selection
      function setupRubricCells() {
        const rubricCells = document.querySelectorAll('.rubric-cell');
        
        rubricCells.forEach(cell => {
          cell.addEventListener('click', function() {
            // Find parent rubric grid
            const grid = this.closest('.rubric-grid');
            
            // Remove selected class from all cells in same row
            const row = this.closest('.rubric-row');
            row.querySelectorAll('.rubric-cell').forEach(c => {
              c.classList.remove('selected');
            });
            
            // Add selected class to clicked cell
            this.classList.add('selected');
            
            // Update the hidden input based on the rubric grid's related input
            const inputId = grid.nextElementSibling.id;
            document.getElementById(inputId).value = this.getAttribute('data-value');
          });
        });
      }
      
      // Validate each section
      function validateSection(sectionId) {
        let isValid = true;
        const validationMessage = document.getElementById(sectionId + 'Validation');
        
        switch(sectionId) {
          case 'section1':
            if (!document.getElementById('evaluatorName').value) {
              validationMessage.textContent = 'Please select your name';
              isValid = false;
            } else if (!document.getElementById('presenterName').value) {
              validationMessage.textContent = 'Please select the presenter\'s name';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
            
          case 'section2':
            if (!document.getElementById('initialPosition').value) {
              validationMessage.textContent = 'Please select your initial position';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
            
          case 'section3':
            if (!document.getElementById('bodyScore').value) {
              validationMessage.textContent = 'Please rate the body of the speech';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
            
          case 'section4':
            if (!document.getElementById('dictionScore').value) {
              validationMessage.textContent = 'Please rate the diction and language';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
            
          case 'section5':
            if (!document.getElementById('eyeContactScore').value) {
              validationMessage.textContent = 'Please rate the eye contact';
              isValid = false;
            } else if (!document.getElementById('postureScore').value) {
              validationMessage.textContent = 'Please rate the posture and gestures';
              isValid = false;
            } else if (!document.getElementById('vocalScore').value) {
              validationMessage.textContent = 'Please rate the vocal variety and pacing';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
            
          case 'section6':
            if (!document.getElementById('positionChange').value) {
              validationMessage.textContent = 'Please select how your position changed';
              isValid = false;
            } else if (!document.getElementById('mostConvincing').value) {
              validationMessage.textContent = 'Please select the most convincing element';
              isValid = false;
            } else if (!document.getElementById('leastConvincing').value) {
              validationMessage.textContent = 'Please select the least convincing element';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
            
          case 'section7':
            if (!document.getElementById('didWell').value) {
              validationMessage.textContent = 'Please select what the presenter did well';
              isValid = false;
            } else if (!document.getElementById('improvement').value) {
              validationMessage.textContent = 'Please select what could be improved';
              isValid = false;
            } else {
              validationMessage.textContent = '';
            }
            break;
        }
        
        return isValid;
      }
      
      // Generate summary before submission
      function generateSummary() {
        const summaryContent = document.getElementById('summaryContent');
        
        // Clear previous content
        summaryContent.innerHTML = '';
        
        // Create summary items
        addSummaryItem(summaryContent, 'Evaluator Name', document.getElementById('evaluatorName').value);
        addSummaryItem(summaryContent, 'Presenter Name', document.getElementById('presenterName').value);
        addSummaryItem(summaryContent, 'Initial Position', document.getElementById('initialPosition').value);
        addSummaryItem(summaryContent, 'Body of Speech Score', document.getElementById('bodyScore').value + '/4');
        
        // Only add comments if they exist
        const bodyComments = document.getElementById('bodyComments').value;
        if (bodyComments) {
          addSummaryItem(summaryContent, 'Body Comments', bodyComments);
        }
        
        addSummaryItem(summaryContent, 'Diction Score', document.getElementById('dictionScore').value + '/4');
        
        // Parse rhetorical devices from JSON
        try {
          const devicesJson = document.getElementById('rhetoricalDevices').value;
          const devices = devicesJson ? JSON.parse(devicesJson) : [];
          addSummaryItem(summaryContent, 'Rhetorical Devices', devices.join(', ') || 'None selected');
        } catch (e) {
          addSummaryItem(summaryContent, 'Rhetorical Devices', 'None selected');
        }
        
        const dictionComments = document.getElementById('dictionComments').value;
        if (dictionComments) {
          addSummaryItem(summaryContent, 'Diction Comments', dictionComments);
        }
        
        addSummaryItem(summaryContent, 'Eye Contact Score', document.getElementById('eyeContactScore').value + '/4');
        addSummaryItem(summaryContent, 'Posture Score', document.getElementById('postureScore').value + '/4');
        addSummaryItem(summaryContent, 'Vocal Variety Score', document.getElementById('vocalScore').value + '/4');
        
        const deliveryComments = document.getElementById('deliveryComments').value;
        if (deliveryComments) {
          addSummaryItem(summaryContent, 'Delivery Comments', deliveryComments);
        }
        
        addSummaryItem(summaryContent, 'Position Change', document.getElementById('positionChange').value);
        addSummaryItem(summaryContent, 'Most Convincing Element', document.getElementById('mostConvincing').value);
        addSummaryItem(summaryContent, 'Least Convincing Element', document.getElementById('leastConvincing').value);
        addSummaryItem(summaryContent, 'Did Well', document.getElementById('didWell').value);
        addSummaryItem(summaryContent, 'Improvement', document.getElementById('improvement').value);
      }
      
      // Add an item to the summary
      function addSummaryItem(container, label, value) {
        const item = document.createElement('div');
        item.className = 'summary-item';
        
        const labelElem = document.createElement('div');
        labelElem.className = 'summary-label';
        labelElem.textContent = label + ':';
        
        const valueElem = document.createElement('div');
        valueElem.className = 'summary-value';
        valueElem.textContent = value;
        
        item.appendChild(labelElem);
        item.appendChild(valueElem);
        container.appendChild(item);
      }
      
      // Submit the form
      function handleFormSubmit(event) {
        event.preventDefault();
        
        // Validate all sections
        const sections = ['section1', 'section2', 'section3', 'section4', 'section5', 'section6', 'section7'];
        
        for (let i = 0; i < sections.length; i++) {
          if (!validateSection(sections[i])) {
            expandSection(sections[i]);
            return;
          }
        }
        
        // Collect form data
        const formData = {
          evaluatorName: document.getElementById('evaluatorName').value,
          presenterName: document.getElementById('presenterName').value,
          initialPosition: document.getElementById('initialPosition').value,
          bodyScore: document.getElementById('bodyScore').value,
          bodyComments: document.getElementById('bodyComments').value || 'No comments provided',
          dictionScore: document.getElementById('dictionScore').value,
          rhetoricalDevices: document.getElementById('rhetoricalDevices').value || '[]',
          dictionComments: document.getElementById('dictionComments').value || 'No comments provided',
          eyeContactScore: document.getElementById('eyeContactScore').value,
          postureScore: document.getElementById('postureScore').value,
          vocalScore: document.getElementById('vocalScore').value,
          deliveryComments: document.getElementById('deliveryComments').value || 'No comments provided',
          positionChange: document.getElementById('positionChange').value,
          mostConvincing: document.getElementById('mostConvincing').value,
          leastConvincing: document.getElementById('leastConvincing').value,
          didWell: document.getElementById('didWell').value,
          improvement: document.getElementById('improvement').value
        };
        
        // Disable submit button to prevent multiple submissions
        document.getElementById('submitBtn').disabled = true;
        
        // Show loading indicator
        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = 'Submitting...';
        
        // Submit form data directly without diagnostic test
        google.script.run
          .withSuccessHandler(function(response) {
            console.log("Form submission response:", response);
            showResultMessage(response.message, response.success);
            
            if (response.success) {
              // Reset form
              document.getElementById('evaluationForm').reset();
              
              // Reset UI
              const sections = document.querySelectorAll('.accordion-item');
              sections.forEach(section => section.classList.remove('active'));
              sections[0].classList.add('active');
              
              const icons = document.querySelectorAll('.expand-icon');
              icons.forEach(icon => icon.textContent = 'expand_more');
              icons[0].textContent = 'expand_less';
              
              // Reset all selected buttons and cells
              document.querySelectorAll('.option-button.selected, .checkbox-button.selected, .rubric-cell.selected')
                .forEach(el => el.classList.remove('selected'));
            }
            
            // Re-enable submit button
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
          })
          .withFailureHandler(function(error) {
            console.error("Form submission error:", error);
            showResultMessage('Error submitting form: ' + error, false);
            
            // Re-enable submit button
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
          })
          .processForm(formData);
      }
      
      // Show result message
      function showResultMessage(message, isSuccess) {
        const resultMessage = document.getElementById('resultMessage');
        resultMessage.textContent = message;
        resultMessage.className = 'result-message ' + (isSuccess ? 'success' : 'error');
        resultMessage.style.display = 'block';
        
        // Scroll to top
        window.scrollTo(0, 0);
        
        // Hide message after 5 seconds
        setTimeout(function() {
          resultMessage.style.display = 'none';
        }, 5000);
      }
    </script>
  </body>
</html>
